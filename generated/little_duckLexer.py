# Generated from little_duck.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,5,28,179,8,28,10,28,12,28,
        182,9,28,1,29,4,29,185,8,29,11,29,12,29,186,1,30,4,30,190,8,30,11,
        30,12,30,191,1,30,1,30,4,30,196,8,30,11,30,12,30,197,1,31,4,31,201,
        8,31,11,31,12,31,202,1,31,1,31,1,32,1,32,1,32,1,32,5,32,211,8,32,
        10,32,12,32,214,9,32,1,32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,1,0,5,2,0,65,90,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,222,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,76,1,0,0,0,5,81,1,0,
        0,0,7,88,1,0,0,0,9,92,1,0,0,0,11,99,1,0,0,0,13,108,1,0,0,0,15,116,
        1,0,0,0,17,125,1,0,0,0,19,129,1,0,0,0,21,132,1,0,0,0,23,137,1,0,
        0,0,25,142,1,0,0,0,27,144,1,0,0,0,29,146,1,0,0,0,31,148,1,0,0,0,
        33,150,1,0,0,0,35,152,1,0,0,0,37,154,1,0,0,0,39,156,1,0,0,0,41,158,
        1,0,0,0,43,160,1,0,0,0,45,162,1,0,0,0,47,164,1,0,0,0,49,166,1,0,
        0,0,51,168,1,0,0,0,53,170,1,0,0,0,55,173,1,0,0,0,57,176,1,0,0,0,
        59,184,1,0,0,0,61,189,1,0,0,0,63,200,1,0,0,0,65,206,1,0,0,0,67,68,
        5,112,0,0,68,69,5,114,0,0,69,70,5,111,0,0,70,71,5,103,0,0,71,72,
        5,114,0,0,72,73,5,97,0,0,73,74,5,109,0,0,74,75,5,97,0,0,75,2,1,0,
        0,0,76,77,5,118,0,0,77,78,5,97,0,0,78,79,5,114,0,0,79,80,5,115,0,
        0,80,4,1,0,0,0,81,82,5,105,0,0,82,83,5,110,0,0,83,84,5,105,0,0,84,
        85,5,99,0,0,85,86,5,105,0,0,86,87,5,111,0,0,87,6,1,0,0,0,88,89,5,
        102,0,0,89,90,5,105,0,0,90,91,5,110,0,0,91,8,1,0,0,0,92,93,5,101,
        0,0,93,94,5,110,0,0,94,95,5,116,0,0,95,96,5,101,0,0,96,97,5,114,
        0,0,97,98,5,111,0,0,98,10,1,0,0,0,99,100,5,102,0,0,100,101,5,108,
        0,0,101,102,5,111,0,0,102,103,5,116,0,0,103,104,5,97,0,0,104,105,
        5,110,0,0,105,106,5,116,0,0,106,107,5,101,0,0,107,12,1,0,0,0,108,
        109,5,101,0,0,109,110,5,115,0,0,110,111,5,99,0,0,111,112,5,114,0,
        0,112,113,5,105,0,0,113,114,5,98,0,0,114,115,5,101,0,0,115,14,1,
        0,0,0,116,117,5,109,0,0,117,118,5,105,0,0,118,119,5,101,0,0,119,
        120,5,110,0,0,120,121,5,116,0,0,121,122,5,114,0,0,122,123,5,97,0,
        0,123,124,5,115,0,0,124,16,1,0,0,0,125,126,5,104,0,0,126,127,5,97,
        0,0,127,128,5,122,0,0,128,18,1,0,0,0,129,130,5,115,0,0,130,131,5,
        105,0,0,131,20,1,0,0,0,132,133,5,115,0,0,133,134,5,105,0,0,134,135,
        5,110,0,0,135,136,5,111,0,0,136,22,1,0,0,0,137,138,5,102,0,0,138,
        139,5,117,0,0,139,140,5,110,0,0,140,141,5,99,0,0,141,24,1,0,0,0,
        142,143,5,61,0,0,143,26,1,0,0,0,144,145,5,59,0,0,145,28,1,0,0,0,
        146,147,5,58,0,0,147,30,1,0,0,0,148,149,5,44,0,0,149,32,1,0,0,0,
        150,151,5,40,0,0,151,34,1,0,0,0,152,153,5,41,0,0,153,36,1,0,0,0,
        154,155,5,123,0,0,155,38,1,0,0,0,156,157,5,125,0,0,157,40,1,0,0,
        0,158,159,5,43,0,0,159,42,1,0,0,0,160,161,5,45,0,0,161,44,1,0,0,
        0,162,163,5,42,0,0,163,46,1,0,0,0,164,165,5,47,0,0,165,48,1,0,0,
        0,166,167,5,62,0,0,167,50,1,0,0,0,168,169,5,60,0,0,169,52,1,0,0,
        0,170,171,5,33,0,0,171,172,5,61,0,0,172,54,1,0,0,0,173,174,5,61,
        0,0,174,175,5,61,0,0,175,56,1,0,0,0,176,180,7,0,0,0,177,179,7,1,
        0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,
        0,0,181,58,1,0,0,0,182,180,1,0,0,0,183,185,7,2,0,0,184,183,1,0,0,
        0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,60,1,0,0,0,
        188,190,7,2,0,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,
        191,192,1,0,0,0,192,193,1,0,0,0,193,195,5,46,0,0,194,196,7,2,0,0,
        195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,
        198,62,1,0,0,0,199,201,7,3,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,
        200,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,6,31,0,0,205,
        64,1,0,0,0,206,207,5,47,0,0,207,208,5,47,0,0,208,212,1,0,0,0,209,
        211,8,4,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,
        213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,6,32,0,0,216,
        66,1,0,0,0,7,0,180,186,191,197,202,212,1,6,0,0
    ]

class little_duckLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAMA = 1
    VARS = 2
    INICIO = 3
    FIN = 4
    ENTERO = 5
    FLOTANTE = 6
    ESCRIBE = 7
    MIENTRAS = 8
    HAZ = 9
    SI = 10
    SINO = 11
    FUNC = 12
    ASSIGN = 13
    SEMI = 14
    COLON = 15
    COMMA = 16
    LPAREN = 17
    RPAREN = 18
    LBRACE = 19
    RBRACE = 20
    PLUS = 21
    MINUS = 22
    MULT = 23
    DIV = 24
    GT = 25
    LT = 26
    NEQ = 27
    EQ = 28
    ID = 29
    CTE_ENT = 30
    CTE_FLOT = 31
    WS = 32
    COMMENT = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'programa'", "'vars'", "'inicio'", "'fin'", "'entero'", "'flotante'", 
            "'escribe'", "'mientras'", "'haz'", "'si'", "'sino'", "'func'", 
            "'='", "';'", "':'", "','", "'('", "')'", "'{'", "'}'", "'+'", 
            "'-'", "'*'", "'/'", "'>'", "'<'", "'!='", "'=='" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAMA", "VARS", "INICIO", "FIN", "ENTERO", "FLOTANTE", "ESCRIBE", 
            "MIENTRAS", "HAZ", "SI", "SINO", "FUNC", "ASSIGN", "SEMI", "COLON", 
            "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", 
            "MULT", "DIV", "GT", "LT", "NEQ", "EQ", "ID", "CTE_ENT", "CTE_FLOT", 
            "WS", "COMMENT" ]

    ruleNames = [ "PROGRAMA", "VARS", "INICIO", "FIN", "ENTERO", "FLOTANTE", 
                  "ESCRIBE", "MIENTRAS", "HAZ", "SI", "SINO", "FUNC", "ASSIGN", 
                  "SEMI", "COLON", "COMMA", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "PLUS", "MINUS", "MULT", "DIV", "GT", "LT", 
                  "NEQ", "EQ", "ID", "CTE_ENT", "CTE_FLOT", "WS", "COMMENT" ]

    grammarFileName = "little_duck.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


