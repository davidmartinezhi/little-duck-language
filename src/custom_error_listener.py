from antlr4.error.ErrorListener import ErrorListener


class LittleDuckErrorListener(ErrorListener):
    """
    Custom error listener for the Little Duck language parser.

    This class overrides the default error listener provided by ANTLR to customize
    the error messages displayed when a syntax error is encountered during parsing.
    It provides more user-friendly and specific error messages for common syntax errors,
    such as missing semicolons and mismatched braces.
    """

    def __init__(self):
        """
        Initializes the custom error listener by calling the superclass initializer.
        """
        super(LittleDuckErrorListener, self).__init__()

    def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
        """
        Overrides the syntaxError method to handle syntax errors encountered during parsing.

        Args:
            recognizer: The parser instance.
            offendingSymbol: The symbol that caused the error.
            line (int): The line number where the error occurred.
            column (int): The column number where the error occurred.
            msg (str): The default error message generated by ANTLR.
            e: The exception generated by the parser (if any).
        """
        line = line - 1  # Adjust line number to start from 0

        # Default error message
        error_message = f"Syntax error at line {line}: {msg}"

        # Check for missing semicolon ';' in the error message
        if "missing ';'" in msg:
            error_message = f"Syntax error at line {line}: Missing semicolon ';'"

        # Check for mismatched braces '{' or '}'
        elif "mismatched input" in msg and ("{" in msg or "}" in msg):
            error_message = (
                f"Syntax error at line {line}: Mismatched brace '{{' or '}}'"
            )

        # Check for unexpected token or missing element
        elif "no viable alternative at input" in msg:
            error_message = (
                f"Syntax error at line {line}: Unexpected token or missing element."
            )

        # Print the customized error message
        print(error_message)

        raise Exception(f"Parsing stopped due to syntax error: {error_message}")
